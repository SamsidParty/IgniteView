"use strict";(self.webpackChunkigniteview=self.webpackChunkigniteview||[]).push([[4],{3351:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var a=i(2428);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},3522:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"interop/call_csharp_from_js","title":"Calling C# From JavaScript","description":"From JavaScript","source":"@site/docs/interop/call_csharp_from_js.md","sourceDirName":"interop","slug":"/interop/call_csharp_from_js","permalink":"/IgniteView/docs/interop/call_csharp_from_js","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"C# and JavaScript Interop","permalink":"/IgniteView/docs/category/c-and-javascript-interop"},"next":{"title":"Calling JavaScript From C#","permalink":"/IgniteView/docs/interop/call_js_from_csharp"}}');var t=i(9168),r=i(3351);const s={},c="Calling C# From JavaScript",o={},l=[{value:"Defining Commands",id:"defining-commands",level:2},{value:"Calling Commands",id:"calling-commands",level:2},{value:"Getting Return Values",id:"getting-return-values",level:2},{value:"Async Commands",id:"async-commands",level:2},{value:"Command Context",id:"command-context",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"calling-c-from-javascript",children:"Calling C# From JavaScript"})}),"\n",(0,t.jsx)(n.h2,{id:"defining-commands",children:"Defining Commands"}),"\n",(0,t.jsx)(n.p,{children:'Much like Tauri, IgniteView allows you to expose functions as "Commands", which can be called by JavaScript code.'}),"\n",(0,t.jsx)(n.p,{children:"To create a command:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Write a ",(0,t.jsx)(n.em,{children:"public"}),", ",(0,t.jsx)(n.em,{children:"static"})," function that contains your C# logic"]}),"\n",(0,t.jsxs)(n.li,{children:["Add this function to a ",(0,t.jsx)(n.em,{children:"public"})," class, we recommend creating a dedicated class for all your commands"]}),"\n",(0,t.jsxs)(n.li,{children:["Attach a ",(0,t.jsx)(n.code,{children:"[Command]"})," attribute to your static method, with the parameter being the name of your function in JavaScript"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Commands.cs"',children:'[Command("beep")]\r\npublic static void Beep(int times)\r\n{\r\n    for (int i = 0; i < times; i++)\r\n    {\r\n        Console.Beep();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"calling-commands",children:"Calling Commands"}),"\n",(0,t.jsxs)(n.p,{children:["In your JavaScript code, the command is now available to call using the ",(0,t.jsx)(n.code,{children:"window.igniteView.commandBridge"})," object:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="Main.js"',children:"igniteView.commandBridge.beep(5); // Beeps 5 times\n"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-return-values",children:"Getting Return Values"}),"\n",(0,t.jsx)(n.p,{children:"You are able to return data from the commands. Most serializable types are supported, including primitive types and arrays."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Commands.cs"',children:'[Command("getUsername")]\r\npublic static string GetUsername()\r\n{\r\n    return Environment.UserName;\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Calling from JavaScript will return a ",(0,t.jsx)(n.code,{children:"Promise"}),", which you will need to await."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const username = await igniteView.commandBridge.getUsername();\r\nconsole.log(username);\n"})}),"\n",(0,t.jsx)(n.p,{children:"---- OR ----"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"igniteView.commandBridge.getUsername().then(console.log);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"async-commands",children:"Async Commands"}),"\n",(0,t.jsxs)(n.p,{children:["Returning a ",(0,t.jsx)(n.code,{children:"Task"})," from a command is also supported:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Commands.cs"',children:'[Command("getUsernameAsync")]\r\npublic static async Task<string> GetUsernameAsync()\r\n{\r\n    await Task.Delay(1000);\r\n    return Environment.UserName;\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"command-context",children:"Command Context"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, you may need to access the ",(0,t.jsx)(n.code,{children:"WebWindow"})," object from the command. To do this, simply add a ",(0,t.jsx)(n.code,{children:"WebWindow"})," as the first parameter of the method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Commands.cs"',children:'[Command("resize")]\r\npublic static void Resize(WebWindow target, int width, int height)\r\n{\r\n    target.Bounds = new WindowBounds(width, height);\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the ",(0,t.jsx)(n.code,{children:"target"})," variable will automatically be filled in as the calling window.\r\nTo execute the method, simply call it as usual, but omit the ",(0,t.jsx)(n.code,{children:"target"})," parameter in JavaScript:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"igniteView.commandBridge.resize(640, 480);\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);